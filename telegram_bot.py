#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import logging
import json
import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, ContextTypes, filters
from io import BytesIO
import pandas as pd
import uuid
import calendar
import locale
import matplotlib.pyplot as plt
import matplotlib
import numpy as np
from decimal import Decimal

# Configura√ß√£o para gr√°ficos bonitos
matplotlib.use('Agg')
plt.style.use('ggplot')
plt.rcParams['font.size'] = 12
plt.rcParams['figure.figsize'] = (12, 7)
plt.rcParams['axes.spines.top'] = False
plt.rcParams['axes.spines.right'] = False

# Emojis que ser√£o usados no bot
EMOJI = {
    "entrada": "üíπ",
    "saida": "üìâ",
    "transacao": "üí∏",
    "saldo": "üí∞",
    "relatorio": "üìä",
    "calendario": "üìÖ",
    "config": "‚öôÔ∏è",
    "voltar": "‚¨ÖÔ∏è",
    "confirmar": "‚úÖ",
    "cancelar": "‚ùå",
    "adicionar": "‚ûï",
    "remover": "‚ûñ",
    "editar": "‚úèÔ∏è",
    "exportar": "üì§",
    "historico": "üìã",
    "fechamento": "üîí",
    "dinheiro": "üíµ",
    "moeda": "ü™ô",
    "grafico": "üìà",
    "alerta": "‚ö†Ô∏è",
    "erro": "‚ùó",
    "info": "‚ÑπÔ∏è",
    "sucesso": "‚úÖ",
    "carteira": "üëõ",
    "lupa": "üîç",
    "hora": "‚è∞"
}

# Configurando o locale para portugu√™s brasileiro
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')
    except:
        pass  # Se n√£o conseguir configurar o locale, usa o padr√£o

# Configura√ß√£o de logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Estados para o ConversationHandler
(
    MENU_PRINCIPAL,
    REGISTRAR_TRANSACAO, 
    ESCOLHER_TIPO_TRANSACAO,
    INFORMAR_CATEGORIA,
    INFORMAR_VALOR,
    INFORMAR_DESCRICAO,
    CONFIRMAR_TRANSACAO,
    RELATORIO,
    ESCOLHER_PERIODO_RELATORIO,
    CONFIRMAR_FECHAMENTO_CAIXA,
    CONFIGURACOES,
    ADICIONAR_CATEGORIA,
    REMOVER_CATEGORIA,
    EDITAR_CATEGORIA,
    DEFINIR_META,
    AJUSTAR_SALDO,
    CONFIRMAR_APAGAR_DADOS
) = range(17)

# Diret√≥rio para armazenar os dados do bot
DATA_DIR = "bot_data"
os.makedirs(DATA_DIR, exist_ok=True)

# Fun√ß√£o para carregar os dados de um usu√°rio
def carregar_dados_usuario(user_id):
    arquivo = f"{DATA_DIR}/dados_{user_id}.json"
    try:
        with open(arquivo, 'r', encoding='utf-8') as f:
            dados = json.load(f)
            
            # Garantir que todas as chaves necess√°rias existam (para compatibilidade com vers√µes anteriores)
            if "metas" not in dados:
                dados["metas"] = {
                    "economia_mensal": 0,
                    "limite_gastos": 0,
                }
            
            if "notificacoes" not in dados:
                dados["notificacoes"] = {
                    "alerta_limite": True,
                    "lembrete_diario": False
                }
                
            return dados
    except (FileNotFoundError, json.JSONDecodeError):
        # Estrutura inicial dos dados
        return {
            "transacoes": [],
            "categorias_entrada": ["Venda", "Investimento", "Sal√°rio", "Outro"],
            "categorias_saida": ["Mercadoria", "Pagamento", "Compra", "Alimenta√ß√£o", "Transporte", "Outro"],
            "saldo_atual": 0,
            "data_ultimo_fechamento": None,
            "metas": {
                "economia_mensal": 0,
                "limite_gastos": 0,
            },
            "notificacoes": {
                "alerta_limite": True,
                "lembrete_diario": False
            }
        }

# Fun√ß√£o para salvar os dados de um usu√°rio
def salvar_dados_usuario(user_id, dados):
    arquivo = f"{DATA_DIR}/dados_{user_id}.json"
    with open(arquivo, 'w', encoding='utf-8') as f:
        json.dump(dados, f, ensure_ascii=False, indent=2, default=str)

# Fun√ß√£o para formatar valor em reais
def formatar_valor(valor):
    try:
        # Converter para Decimal para maior precis√£o
        valor_decimal = Decimal(str(valor))
        # Formatar com 2 casas decimais
        return f"R$ {valor_decimal:.2f}".replace('.', ',')
    except:
        return f"R$ {float(valor):.2f}".replace('.', ',')

# Fun√ß√£o para obter a data atual formatada
def obter_data_atual_formatada():
    agora = datetime.datetime.now()
    return agora.strftime("%d/%m/%Y %H:%M:%S")

# Fun√ß√£o para obter a data atual como string (apenas a data)
def obter_data_hoje():
    agora = datetime.datetime.now()
    return agora.strftime("%d/%m/%Y")

# Fun√ß√£o para analisar a data no formato brasileiro
def analisar_data_br(data_str):
    day, month, year = map(int, data_str.split('/'))
    return datetime.datetime(year, month, day)

# Fun√ß√£o para obter o primeiro e √∫ltimo dia do m√™s
def obter_datas_mes(ano, mes):
    primeiro_dia = datetime.datetime(ano, mes, 1)
    _, ultimo_dia_num = calendar.monthrange(ano, mes)
    ultimo_dia = datetime.datetime(ano, mes, ultimo_dia_num, 23, 59, 59)
    return primeiro_dia, ultimo_dia

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # Carregar ou criar dados do usu√°rio
    dados = carregar_dados_usuario(user_id)
    context.user_data['dados'] = dados
    
    # Mensagem de boas-vindas com design melhorado
    await update.message.reply_text(
        f"üéâ *Ol√°, {user_name}!* üéâ\n\n"
        f"Bem-vindo ao seu *Assistente Financeiro Pessoal*.\n\n"
        f"{EMOJI['saldo']} Saldo atual: *{formatar_valor(dados['saldo_atual'])}*\n\n"
        f"Este assistente vai ajudar voc√™ a controlar suas finan√ßas de forma simples e eficiente.\n\n"
        f"{EMOJI['info']} Use os bot√µes abaixo para navegar:",
        parse_mode='Markdown',
        reply_markup=criar_menu_principal()
    )
    
    return MENU_PRINCIPAL

# Fun√ß√£o para criar o menu principal
def criar_menu_principal():
    keyboard = [
        [
            InlineKeyboardButton(f"{EMOJI['entrada']} Registrar Entrada", callback_data='registrar_entrada'),
            InlineKeyboardButton(f"{EMOJI['saida']} Registrar Sa√≠da", callback_data='registrar_saida')
        ],
        [
            InlineKeyboardButton(f"{EMOJI['relatorio']} Relat√≥rios", callback_data='relatorios'),
            InlineKeyboardButton(f"{EMOJI['historico']} Hist√≥rico", callback_data='historico')
        ],
        [
            InlineKeyboardButton(f"{EMOJI['fechamento']} Fechamento de Caixa", callback_data='fechamento_caixa'),
            InlineKeyboardButton(f"{EMOJI['config']} Configura√ß√µes", callback_data='configuracoes')
        ],
        [
            InlineKeyboardButton(f"{EMOJI['dinheiro']} Ajustar Saldo", callback_data='ajustar_saldo'),
            InlineKeyboardButton(f"{EMOJI['grafico']} Definir Metas", callback_data='definir_metas')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# Fun√ß√£o para voltar ao menu principal
async def menu_principal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    if query:
        await query.answer()
        await query.edit_message_text(
            text=f"{EMOJI['carteira']} *Menu Principal*\n\n"
                 f"{EMOJI['saldo']} Saldo atual: *{formatar_valor(dados['saldo_atual'])}*",
            parse_mode='Markdown',
            reply_markup=criar_menu_principal()
        )
    else:
        await update.message.reply_text(
            text=f"{EMOJI['carteira']} *Menu Principal*\n\n"
                 f"{EMOJI['saldo']} Saldo atual: *{formatar_valor(dados['saldo_atual'])}*",
            parse_mode='Markdown',
            reply_markup=criar_menu_principal()
        )
    return MENU_PRINCIPAL

# Callback para o menu principal
async def callback_menu_principal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    opcao = query.data
    user_id = update.effective_user.id
    
    logger.info(f"Callback menu principal: {opcao}")
    
    # Carregar dados atualizados
    dados = carregar_dados_usuario(user_id)
    context.user_data['dados'] = dados
    
    if opcao == 'registrar_entrada':
        context.user_data['transacao_temp'] = {'tipo': 'entrada'}
        categorias = dados['categorias_entrada']
        
        # Layout de bot√µes em grade (2 por linha, quando poss√≠vel)
        keyboard = []
        row = []
        for i, cat in enumerate(categorias):
            row.append(InlineKeyboardButton(f"{EMOJI['entrada']} {cat}", callback_data=f"cat_{cat}"))
            if len(row) == 2 or i == len(categorias) - 1:
                keyboard.append(row)
                row = []
        
        keyboard.append([InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')])
        
        await query.edit_message_text(
            text=f"{EMOJI['entrada']} *Registrar Entrada*\n\nSelecione a categoria:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return INFORMAR_CATEGORIA
        
    elif opcao == 'registrar_saida':
        context.user_data['transacao_temp'] = {'tipo': 'saida'}
        categorias = dados['categorias_saida']
        
        # Layout de bot√µes em grade (2 por linha, quando poss√≠vel)
        keyboard = []
        row = []
        for i, cat in enumerate(categorias):
            row.append(InlineKeyboardButton(f"{EMOJI['saida']} {cat}", callback_data=f"cat_{cat}"))
            if len(row) == 2 or i == len(categorias) - 1:
                keyboard.append(row)
                row = []
                
        keyboard.append([InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')])
        
        await query.edit_message_text(
            text=f"{EMOJI['saida']} *Registrar Sa√≠da*\n\nSelecione a categoria:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return INFORMAR_CATEGORIA
        
    elif opcao == 'relatorios':
        keyboard = [
            [
                InlineKeyboardButton(f"{EMOJI['calendario']} Relat√≥rio do Dia", callback_data='relatorio_dia'),
                InlineKeyboardButton(f"{EMOJI['calendario']} Relat√≥rio da Semana", callback_data='relatorio_semana')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['calendario']} Relat√≥rio do M√™s", callback_data='relatorio_mes'),
                InlineKeyboardButton(f"{EMOJI['lupa']} Relat√≥rio Personalizado", callback_data='relatorio_personalizado')
            ],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]
        ]
        await query.edit_message_text(
            text=f"{EMOJI['relatorio']} *Relat√≥rios Financeiros*\n\nEscolha o tipo de relat√≥rio que deseja visualizar:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return RELATORIO
        
    elif opcao == 'historico':
        # Exibir hist√≥rico de transa√ß√µes recentes
        await mostrar_historico(update, context)
        return MENU_PRINCIPAL
    elif opcao == 'grafico_historico':
        await mostrar_grafico_historico(update, context)
        return MENU_PRINCIPAL
    elif opcao == 'exportar_historico':
        await exportar_historico(update, context)
        return MENU_PRINCIPAL
        
    elif opcao == 'fechamento_caixa':
        # Verificar se j√° houve fechamento hoje
        data_hoje = obter_data_hoje()
        ultimo_fechamento = dados.get('data_ultimo_fechamento', None)
        
        logger.info(f"Verificando fechamento: data_hoje={data_hoje}, ultimo_fechamento={ultimo_fechamento}")
        
        if ultimo_fechamento == data_hoje:
            keyboard = [
                [InlineKeyboardButton(f"{EMOJI['confirmar']} Sim, fazer novo fechamento", callback_data='novo_fechamento')],
                [InlineKeyboardButton(f"{EMOJI['cancelar']} N√£o, voltar ao menu", callback_data='voltar_menu')]
            ]
            await query.edit_message_text(
                text=f"{EMOJI['alerta']} *Aten√ß√£o*\n\n"
                     f"Voc√™ j√° realizou um fechamento de caixa hoje ({data_hoje}).\n\n"
                     f"Deseja realizar um novo fechamento?",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return CONFIRMAR_FECHAMENTO_CAIXA
        else:
            await preparar_fechamento_caixa(update, context)
            return CONFIRMAR_FECHAMENTO_CAIXA
        
    elif opcao == 'novo_fechamento':
        logger.info("Iniciando novo fechamento")
        await preparar_fechamento_caixa(update, context)
        return CONFIRMAR_FECHAMENTO_CAIXA
        
    elif opcao == 'configuracoes':
        keyboard = [
            [
                InlineKeyboardButton(f"{EMOJI['adicionar']} Categoria Entrada", callback_data='add_cat_entrada'),
                InlineKeyboardButton(f"{EMOJI['adicionar']} Categoria Sa√≠da", callback_data='add_cat_saida')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['editar']} Editar Cat. Entrada", callback_data='editar_cat_entrada'),
                InlineKeyboardButton(f"{EMOJI['editar']} Editar Cat. Sa√≠da", callback_data='editar_cat_saida')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['remover']} Remover Cat. Entrada", callback_data='remover_cat_entrada'),
                InlineKeyboardButton(f"{EMOJI['remover']} Remover Cat. Sa√≠da", callback_data='remover_cat_saida')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['exportar']} Exportar Dados", callback_data='exportar_dados'),
                InlineKeyboardButton(f"{EMOJI['alerta']} Notifica√ß√µes", callback_data='config_notificacoes')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['erro']} Apagar Dados", callback_data='apagar_dados')
            ],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu Principal", callback_data='voltar_menu')]
        ]
        await query.edit_message_text(
            f"{EMOJI['config']} *Configura√ß√µes*\n\n"
            f"Personalize seu assistente financeiro:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIGURACOES
    
    elif opcao == 'definir_metas':
        # Interface para definir metas financeiras
        metas = dados.get('metas', {'economia_mensal': 0, 'limite_gastos': 0})
        
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['grafico']} Definir Meta de Economia", callback_data='meta_economia')],
            [InlineKeyboardButton(f"{EMOJI['alerta']} Definir Limite de Gastos", callback_data='meta_limite')],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]
        ]
        
        await query.edit_message_text(
            text=f"{EMOJI['grafico']} *Metas Financeiras*\n\n"
                 f"‚Ä¢ Meta de economia mensal: *{formatar_valor(metas['economia_mensal'])}*\n"
                 f"‚Ä¢ Limite de gastos mensal: *{formatar_valor(metas['limite_gastos'])}*\n\n"
                 f"Selecione uma op√ß√£o para definir ou atualizar suas metas:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return DEFINIR_META
        
    elif opcao == 'ajustar_saldo':
        # Interface para ajustar o saldo manualmente
        await query.edit_message_text(
            text=f"{EMOJI['dinheiro']} *Ajustar Saldo*\n\n"
                 f"Saldo atual: *{formatar_valor(dados['saldo_atual'])}*\n\n"
                 f"Digite o novo valor do saldo (use ponto para decimais):",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Cancelar", callback_data='voltar_menu')]])
        )
        
        return AJUSTAR_SALDO
        
    elif opcao == 'voltar_menu':
        return await menu_principal(update, context)
    
    return MENU_PRINCIPAL

# Fun√ß√£o para ajustar saldo manualmente
async def ajustar_saldo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'voltar_menu':
            return await menu_principal(update, context)
        return AJUSTAR_SALDO
    
    valor_texto = update.message.text.strip().replace(',', '.')
    try:
        novo_saldo = float(valor_texto)
        if novo_saldo < 0:
            await update.message.reply_text(
                f"{EMOJI['erro']} O saldo n√£o pode ser negativo. Por favor, digite novamente:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Cancelar", callback_data='voltar_menu')]])
            )
            return AJUSTAR_SALDO
    except ValueError:
        await update.message.reply_text(
            f"{EMOJI['erro']} Valor inv√°lido. Por favor, digite apenas n√∫meros (ex: 1500.50):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Cancelar", callback_data='voltar_menu')]])
        )
        return AJUSTAR_SALDO
    
    # Atualizar o saldo
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Registrar o ajuste como uma transa√ß√£o especial
    ajuste = novo_saldo - dados['saldo_atual']
    
    if ajuste != 0:
        transacao = {
            'tipo': 'entrada' if ajuste > 0 else 'saida',
            'categoria': 'Ajuste Manual',
            'valor': abs(ajuste),
            'descricao': 'Ajuste manual de saldo',
            'data': obter_data_atual_formatada(),
            'id': str(uuid.uuid4())
        }
        
        dados['transacoes'].append(transacao)
    
    # Atualizar o saldo
    dados['saldo_atual'] = novo_saldo
    salvar_dados_usuario(user_id, dados)
    
    # Confirmar para o usu√°rio
    await update.message.reply_text(
        f"{EMOJI['sucesso']} Saldo ajustado com sucesso!\n\n"
        f"Saldo atual: *{formatar_valor(novo_saldo)}*",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]])
    )
    
    return MENU_PRINCIPAL

# Fun√ß√£o para definir metas
async def definir_meta(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    if not query:
        # Recebendo valor digitado pelo usu√°rio
        if 'meta_atual' not in context.user_data:
            await update.message.reply_text(
                f"{EMOJI['erro']} Ocorreu um erro. Por favor, tente novamente atrav√©s do menu.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
            )
            return MENU_PRINCIPAL
        
        tipo_meta = context.user_data['meta_atual']
        valor_texto = update.message.text.strip().replace(',', '.')
        
        try:
            valor_meta = float(valor_texto)
            if valor_meta < 0:
                await update.message.reply_text(
                    f"{EMOJI['erro']} O valor n√£o pode ser negativo. Por favor, digite novamente:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Cancelar", callback_data='voltar_menu')]])
                )
                return DEFINIR_META
        except ValueError:
            await update.message.reply_text(
                f"{EMOJI['erro']} Valor inv√°lido. Por favor, digite apenas n√∫meros (ex: 1000.50):",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Cancelar", callback_data='voltar_menu')]])
            )
            return DEFINIR_META
        
        # Salvar a meta
        user_id = update.effective_user.id
        dados = carregar_dados_usuario(user_id)
        
        if tipo_meta == 'economia':
            dados['metas']['economia_mensal'] = valor_meta
            mensagem = "Meta de economia mensal"
        else:  # limite
            dados['metas']['limite_gastos'] = valor_meta
            mensagem = "Limite de gastos mensal"
        
        salvar_dados_usuario(user_id, dados)
        
        # Confirmar para o usu√°rio
        await update.message.reply_text(
            f"{EMOJI['sucesso']} {mensagem} definido com sucesso!\n\n"
            f"Valor: *{formatar_valor(valor_meta)}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]])
        )
        
        # Limpar dados tempor√°rios
        if 'meta_atual' in context.user_data:
            del context.user_data['meta_atual']
        
        return MENU_PRINCIPAL
    
    # Processando callback
    await query.answer()
    
    if query.data == 'voltar_menu':
        return await menu_principal(update, context)
    
    if query.data == 'meta_economia':
        context.user_data['meta_atual'] = 'economia'
        await query.edit_message_text(
            text=f"{EMOJI['grafico']} *Definir Meta de Economia Mensal*\n\n"
                 f"Digite o valor da sua meta de economia mensal (quanto deseja guardar por m√™s):",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Cancelar", callback_data='voltar_menu')]])
        )
        return DEFINIR_META
    
    elif query.data == 'meta_limite':
        context.user_data['meta_atual'] = 'limite'
        await query.edit_message_text(
            text=f"{EMOJI['alerta']} *Definir Limite de Gastos Mensal*\n\n"
                 f"Digite o valor m√°ximo que deseja gastar por m√™s:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Cancelar", callback_data='voltar_menu')]])
        )
        return DEFINIR_META
    
    return DEFINIR_META

# Fun√ß√£o para selecionar categoria
async def selecionar_categoria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voltar_menu':
        return await menu_principal(update, context)
    
    # Extrair a categoria da callback_data
    categoria = query.data[4:]  # Remove o prefixo "cat_"
    context.user_data['transacao_temp']['categoria'] = categoria
    
    tipo_emoji = EMOJI['entrada'] if context.user_data['transacao_temp']['tipo'] == 'entrada' else EMOJI['saida']
    
    await query.edit_message_text(
        text=f"{tipo_emoji} *Registro de {context.user_data['transacao_temp']['tipo'].capitalize()}*\n\n"
             f"Categoria: *{categoria}*\n\n"
             f"Digite o valor (apenas n√∫meros, use ponto para decimais):",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
    )
    
    return INFORMAR_VALOR

# Fun√ß√£o para informar valor
async def informar_valor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'voltar_menu':
            return await menu_principal(update, context)
        return INFORMAR_VALOR
    
    valor_texto = update.message.text.strip().replace(',', '.')
    try:
        valor = float(valor_texto)
        if valor <= 0:
            await update.message.reply_text(
                f"{EMOJI['erro']} O valor deve ser maior que zero. Por favor, digite novamente:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
            )
            return INFORMAR_VALOR
    except ValueError:
        await update.message.reply_text(
            f"{EMOJI['erro']} Valor inv√°lido. Por favor, digite apenas n√∫meros (ex: 100.50):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return INFORMAR_VALOR
    
    context.user_data['transacao_temp']['valor'] = valor
    
    tipo_emoji = EMOJI['entrada'] if context.user_data['transacao_temp']['tipo'] == 'entrada' else EMOJI['saida']
    categoria = context.user_data['transacao_temp']['categoria']
    
    await update.message.reply_text(
        f"{tipo_emoji} *Registro de {context.user_data['transacao_temp']['tipo'].capitalize()}*\n\n"
        f"Categoria: *{categoria}*\n"
        f"Valor: *{formatar_valor(valor)}*\n\n"
        f"Agora, digite uma descri√ß√£o breve para esta transa√ß√£o:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
    )
    
    return INFORMAR_DESCRICAO

# Fun√ß√£o para informar descri√ß√£o
async def informar_descricao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'voltar_menu':
            return await menu_principal(update, context)
        return INFORMAR_DESCRICAO
    
    descricao = update.message.text.strip()
    if not descricao:
        await update.message.reply_text(
            f"{EMOJI['erro']} A descri√ß√£o n√£o pode estar vazia. Por favor, digite uma descri√ß√£o:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return INFORMAR_DESCRICAO
    
    context.user_data['transacao_temp']['descricao'] = descricao
    
# Continua√ß√£o do c√≥digo

    # Preparar resumo da transa√ß√£o para confirma√ß√£o
    transacao = context.user_data['transacao_temp']
    tipo = "Entrada" if transacao['tipo'] == 'entrada' else "Sa√≠da"
    tipo_emoji = EMOJI['entrada'] if transacao['tipo'] == 'entrada' else EMOJI['saida']
    
    await update.message.reply_text(
        f"{tipo_emoji} *Resumo da Transa√ß√£o*\n\n"
        f"‚Ä¢ Tipo: *{tipo}*\n"
        f"‚Ä¢ Categoria: *{transacao['categoria']}*\n"
        f"‚Ä¢ Valor: *{formatar_valor(transacao['valor'])}*\n"
        f"‚Ä¢ Descri√ß√£o: *{transacao['descricao']}*\n\n"
        f"Confirma esta transa√ß√£o?",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{EMOJI['confirmar']} Confirmar", callback_data='confirmar_transacao')],
            [InlineKeyboardButton(f"{EMOJI['cancelar']} Cancelar", callback_data='voltar_menu')]
        ])
    )
    
    return CONFIRMAR_TRANSACAO

# Fun√ß√£o para confirmar transa√ß√£o
async def confirmar_transacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voltar_menu':
        return await menu_principal(update, context)
    
    user_id = update.effective_user.id
    dados = context.user_data['dados']
    transacao = context.user_data['transacao_temp']
    
    # Adicionar data e ID √† transa√ß√£o
    transacao['data'] = obter_data_atual_formatada()
    transacao['id'] = str(uuid.uuid4())
    
    # Atualizar saldo
    if transacao['tipo'] == 'entrada':
        dados['saldo_atual'] += transacao['valor']
    else:
        dados['saldo_atual'] -= transacao['valor']
    
    # Adicionar √† lista de transa√ß√µes
    dados['transacoes'].append(transacao)
    
    # Verificar limites (para sa√≠das)
    mensagem_alerta = ""
    if transacao['tipo'] == 'saida' and dados.get('notificacoes', {}).get('alerta_limite', True):
        # Calcular gastos do m√™s atual
        hoje = datetime.datetime.now()
        primeiro_dia, ultimo_dia = obter_datas_mes(hoje.year, hoje.month)
        
        gastos_mes = 0
        for t in dados['transacoes']:
            if t['tipo'] == 'saida':
                try:
                    data_t = datetime.datetime.strptime(t['data'], "%d/%m/%Y %H:%M:%S")
                    if primeiro_dia <= data_t <= ultimo_dia:
                        gastos_mes += t['valor']
                except:
                    continue
        
        # Verificar se ultrapassou o limite
        limite_gastos = dados.get('metas', {}).get('limite_gastos', 0)
        if limite_gastos > 0 and gastos_mes > limite_gastos:
            mensagem_alerta = f"\n\n{EMOJI['alerta']} *Alerta de Limite*\n" \
                             f"Voc√™ ultrapassou seu limite mensal de gastos! " \
                             f"Gastos no m√™s: {formatar_valor(gastos_mes)}\n" \
                             f"Seu limite: {formatar_valor(limite_gastos)}"
    
    # Salvar dados
    salvar_dados_usuario(user_id, dados)
    
    # Confirmar para o usu√°rio
    tipo = "Entrada" if transacao['tipo'] == 'entrada' else "Sa√≠da"
    tipo_emoji = EMOJI['entrada'] if transacao['tipo'] == 'entrada' else EMOJI['saida']
    
    await query.edit_message_text(
        f"{EMOJI['sucesso']} *{tipo} registrada com sucesso!*\n\n"
        f"‚Ä¢ Categoria: *{transacao['categoria']}*\n"
        f"‚Ä¢ Valor: *{formatar_valor(transacao['valor'])}*\n"
        f"‚Ä¢ Descri√ß√£o: *{transacao['descricao']}*\n\n"
        f"{EMOJI['saldo']} Seu saldo atual √©: *{formatar_valor(dados['saldo_atual'])}*"
        f"{mensagem_alerta}",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{EMOJI['adicionar']} Nova Transa√ß√£o", callback_data=f"registrar_{transacao['tipo']}")],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]
        ])
    )
    
    # Limpar dados tempor√°rios
    if 'transacao_temp' in context.user_data:
        del context.user_data['transacao_temp']
    
    return MENU_PRINCIPAL

# Fun√ß√£o para mostrar hist√≥rico
async def mostrar_historico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger.info("Iniciando mostrar_historico")
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Obter as √∫ltimas 10 transa√ß√µes (ou menos, se houver menos)
    transacoes = dados['transacoes'][-10:]
    transacoes.reverse()  # Mais recentes primeiro
    
    if not transacoes:
        logger.info("Nenhuma transa√ß√£o encontrada")
        await query.edit_message_text(
            f"{EMOJI['info']} N√£o h√° transa√ß√µes registradas ainda.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return
    
    logger.info(f"Encontradas {len(transacoes)} transa√ß√µes")
    
    # Formatar o hist√≥rico
    texto = f"{EMOJI['historico']} *√öltimas Transa√ß√µes*\n\n"
    
    for t in transacoes:
        tipo_emoji = EMOJI['entrada'] if t['tipo'] == 'entrada' else EMOJI['saida']
        valor_formatado = formatar_valor(t['valor'])
        
        texto += f"{tipo_emoji} *{t['data'].split()[0]}* - {t['categoria']}\n"
        texto += f"    {valor_formatado} - {t['descricao']}\n\n"
    
    texto += f"{EMOJI['saldo']} *Saldo Atual*: {formatar_valor(dados['saldo_atual'])}"
    
    # Bot√µes para navega√ß√£o
    keyboard = [
        [
            InlineKeyboardButton(f"{EMOJI['grafico']} Ver Gr√°fico", callback_data='grafico_historico'),
            InlineKeyboardButton(f"{EMOJI['exportar']} Exportar", callback_data='exportar_historico')
        ],
        [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]
    ]
    
    logger.info("Enviando mensagem com hist√≥rico")
    await query.edit_message_text(
        texto,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# Fun√ß√£o para exportar hist√≥rico
async def exportar_historico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger.info("Iniciando exportar_historico")
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Obter as √∫ltimas 10 transa√ß√µes
    transacoes = dados['transacoes'][-10:]
    transacoes.reverse()  # Mais recentes primeiro
    
    if not transacoes:
        logger.info("Nenhuma transa√ß√£o para exportar")
        await query.edit_message_text(
            f"{EMOJI['info']} N√£o h√° transa√ß√µes para exportar.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return
    
    try:
        logger.info(f"Exportando {len(transacoes)} transa√ß√µes")
        
        # Criar CSV em mem√≥ria
        output = BytesIO()
        output.write("Tipo,Data,Categoria,Valor,Descri√ß√£o\n".encode('utf-8'))
        
        for t in transacoes:
            valor_str = str(t['valor']).replace('.', ',')
            linha = f"{t['tipo']},{t['data']},{t['categoria']},{valor_str},\"{t['descricao']}\"\n"
            output.write(linha.encode('utf-8'))
        
        output.seek(0)
        
        # Enviar arquivo
        data_atual = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=output,
            filename=f"historico_{data_atual}.csv",
            caption=f"{EMOJI['exportar']} Exporta√ß√£o das √∫ltimas {len(transacoes)} transa√ß√µes"
        )
        
        logger.info("Arquivo enviado com sucesso")
        
        # Atualizar mensagem
        await query.edit_message_text(
            f"{EMOJI['sucesso']} Hist√≥rico exportado com sucesso!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        
    except Exception as e:
        logger.error(f"Erro ao exportar hist√≥rico: {str(e)}")
        await query.edit_message_text(
            f"{EMOJI['erro']} Ocorreu um erro ao exportar o hist√≥rico. Por favor, tente novamente.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
    
    return MENU_PRINCIPAL

# Fun√ß√£o para exibir gr√°fico do hist√≥rico
async def mostrar_grafico_historico(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger.info("Iniciando mostrar_grafico_historico")
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Verificar se h√° transa√ß√µes suficientes
    if len(dados['transacoes']) < 2:
        logger.info("Transa√ß√µes insuficientes para gerar gr√°fico")
        await query.edit_message_text(
            f"{EMOJI['info']} N√£o h√° transa√ß√µes suficientes para gerar um gr√°fico.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return
    
    logger.info("Gerando gr√°ficos")
    
    try:
        # Criar DataFrame para an√°lise
        df = pd.DataFrame(dados['transacoes'])
        
        # Converter datas
        df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y %H:%M:%S')
        df['date_only'] = df['data'].dt.date
        
        # Separar entradas e sa√≠das
        entradas = df[df['tipo'] == 'entrada'].copy()
        saidas = df[df['tipo'] == 'saida'].copy()
        
        # Agrupar por data
        if not entradas.empty:
            entradas_por_data = entradas.groupby('date_only')['valor'].sum()
        else:
            entradas_por_data = pd.Series()
        
        if not saidas.empty:
            saidas_por_data = saidas.groupby('date_only')['valor'].sum()
        else:
            saidas_por_data = pd.Series()
        
        # Criar figura
        plt.figure(figsize=(10, 6))
        
        # Personalizar o gr√°fico para um visual mais moderno
        plt.style.use('ggplot')
        
        # Plotar gr√°fico
        if not entradas_por_data.empty:
            plt.plot(entradas_por_data.index, entradas_por_data.values, 'g-', linewidth=2.5, marker='o', markersize=6, label='Entradas')
        
        if not saidas_por_data.empty:
            plt.plot(saidas_por_data.index, saidas_por_data.values, 'r-', linewidth=2.5, marker='o', markersize=6, label='Sa√≠das')
        
        plt.title('Fluxo de Caixa - √öltimos Dias', fontsize=16, fontweight='bold')
        plt.xlabel('Data', fontsize=12)
        plt.ylabel('Valor (R$)', fontsize=12)
        plt.grid(True, alpha=0.3)
        plt.legend(fontsize=12)
        
        # Formatar eixo Y para valores monet√°rios
        from matplotlib.ticker import FuncFormatter
        def format_real(x, pos):
            return f'R${x:.0f}'
        plt.gca().yaxis.set_major_formatter(FuncFormatter(format_real))
        
        # Ajustar layout
        plt.tight_layout()
        
        # Salvar em mem√≥ria
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        
        logger.info("Enviando primeiro gr√°fico")
        # Enviar primeiro gr√°fico
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=buf,
            caption=f"{EMOJI['grafico']} Gr√°fico de Fluxo de Caixa por Dia"
        )
        
        # Criar um gr√°fico adicional de categorias
        plt.figure(figsize=(10, 6))
        
        # Agrupar por categoria para o gr√°fico de pizza
        if not saidas.empty:
            categorias_saida = saidas.groupby('categoria')['valor'].sum()
            
            # Criar gr√°fico de pizza
            plt.pie(categorias_saida.values, labels=categorias_saida.index, autopct='%1.1f%%', 
                    startangle=90, shadow=True, explode=[0.05]*len(categorias_saida),
                    textprops={'fontsize': 12})
            plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
            plt.title('Distribui√ß√£o de Gastos por Categoria', fontsize=16, fontweight='bold')
            
            # Salvar em mem√≥ria
            buf2 = BytesIO()
            plt.tight_layout()
            plt.savefig(buf2, format='png', dpi=100)
            buf2.seek(0)
            
            logger.info("Enviando segundo gr√°fico")
            # Enviar segundo gr√°fico
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=buf2,
                caption=f"{EMOJI['grafico']} Distribui√ß√£o de Gastos por Categoria"
            )
        
        # Voltar ao menu
        await query.edit_message_text(
            f"{EMOJI['sucesso']} Gr√°ficos gerados com sucesso!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        
    except Exception as e:
        logger.error(f"Erro ao gerar gr√°ficos: {str(e)}")
        await query.edit_message_text(
            f"{EMOJI['erro']} Ocorreu um erro ao gerar os gr√°ficos. Por favor, tente novamente.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
    
    return MENU_PRINCIPAL

# Fun√ß√£o para gera√ß√£o de relat√≥rios
async def callback_relatorios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    opcao = query.data
    
    if opcao == 'voltar_menu':
        return await menu_principal(update, context)
    
    hoje = datetime.datetime.now()
    transacoes = dados['transacoes']
    
    # Definir per√≠odo com base na op√ß√£o selecionada
    if opcao == 'relatorio_dia':
        # Relat√≥rio do dia atual
        data_inicio = hoje.replace(hour=0, minute=0, second=0, microsecond=0)
        data_fim = hoje.replace(hour=23, minute=59, second=59, microsecond=999999)
        titulo = f"Relat√≥rio do Dia {hoje.strftime('%d/%m/%Y')}"
        
    elif opcao == 'relatorio_semana':
        # Relat√≥rio da semana atual
        data_inicio = hoje - datetime.timedelta(days=hoje.weekday())
        data_inicio = data_inicio.replace(hour=0, minute=0, second=0, microsecond=0)
        data_fim = hoje.replace(hour=23, minute=59, second=59, microsecond=999999)
        titulo = f"Relat√≥rio da Semana ({data_inicio.strftime('%d/%m/%Y')} a {hoje.strftime('%d/%m/%Y')})"
        
    elif opcao == 'relatorio_mes':
        # Relat√≥rio do m√™s atual
        data_inicio, data_fim = obter_datas_mes(hoje.year, hoje.month)
        titulo = f"Relat√≥rio do M√™s de {calendar.month_name[hoje.month]} de {hoje.year}"
        
    elif opcao == 'relatorio_personalizado':
        # Solicitar per√≠odo personalizado
        await query.edit_message_text(
            f"{EMOJI['calendario']} *Relat√≥rio Personalizado*\n\n"
            f"Para gerar um relat√≥rio personalizado, envie as datas de in√≠cio e fim no formato DD/MM/AAAA - DD/MM/AAAA\n\n"
            f"Exemplo: 01/05/2025 - 15/05/2025",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return ESCOLHER_PERIODO_RELATORIO
    
    if opcao != 'relatorio_personalizado':
        # Gerar relat√≥rio baseado no per√≠odo selecionado
        await gerar_relatorio(update, context, data_inicio, data_fim, titulo)
    
    return RELATORIO

# Fun√ß√£o para processar per√≠odo personalizado
async def escolher_periodo_relatorio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'voltar_menu':
            return await menu_principal(update, context)
        return ESCOLHER_PERIODO_RELATORIO
    
    # Processar a entrada do usu√°rio
    texto = update.message.text.strip()
    try:
        # Tentar extrair as datas
        datas = texto.split('-')
        if len(datas) != 2:
            raise ValueError("Formato inv√°lido")
        
        data_inicio_str = datas[0].strip()
        data_fim_str = datas[1].strip()
        
        data_inicio = analisar_data_br(data_inicio_str)
        data_fim = analisar_data_br(data_fim_str)
        data_fim = data_fim.replace(hour=23, minute=59, second=59)
        
        titulo = f"Relat√≥rio de {data_inicio_str} a {data_fim_str}"
        
        # Gerar relat√≥rio
        await gerar_relatorio(update, context, data_inicio, data_fim, titulo, is_message=True)
        
        return RELATORIO
        
    except Exception as e:
        await update.message.reply_text(
            f"{EMOJI['erro']} Formato de data inv√°lido. Por favor, use o formato DD/MM/AAAA - DD/MM/AAAA\n\n"
            f"Exemplo: 01/05/2025 - 15/05/2025",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return ESCOLHER_PERIODO_RELATORIO

# Fun√ß√£o para gerar relat√≥rio
async def gerar_relatorio(update: Update, context, data_inicio, data_fim, titulo, is_message=False):
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Converter strings de data para datetime
    transacoes_filtradas = []
    for t in dados['transacoes']:
        try:
            data_transacao = datetime.datetime.strptime(t['data'], "%d/%m/%Y %H:%M:%S")
            if data_inicio <= data_transacao <= data_fim:
                transacoes_filtradas.append(t)
        except Exception:
            # Ignorar transa√ß√µes com formato de data inv√°lido
            continue
    
    # Calcular totais
    total_entradas = sum(t['valor'] for t in transacoes_filtradas if t['tipo'] == 'entrada')
    total_saidas = sum(t['valor'] for t in transacoes_filtradas if t['tipo'] == 'saida')
    saldo_periodo = total_entradas - total_saidas
    
    # Agrupar por categorias
    categorias_entrada = {}
    categorias_saida = {}
    
    for t in transacoes_filtradas:
        if t['tipo'] == 'entrada':
            categorias_entrada[t['categoria']] = categorias_entrada.get(t['categoria'], 0) + t['valor']
        else:
            categorias_saida[t['categoria']] = categorias_saida.get(t['categoria'], 0) + t['valor']
    
    # Preparar texto do relat√≥rio
    texto = f"{EMOJI['relatorio']} *{titulo}*\n\n"
    
    texto += f"{EMOJI['saldo']} *Resumo Financeiro*\n"
    texto += f"‚Ä¢ Total de Entradas: *{formatar_valor(total_entradas)}*\n"
    texto += f"‚Ä¢ Total de Sa√≠das: *{formatar_valor(total_saidas)}*\n"
    texto += f"‚Ä¢ Saldo do Per√≠odo: *{formatar_valor(saldo_periodo)}*\n\n"
    
    # Calcular o progresso das metas
    metas = dados.get('metas', {})
    meta_economia = metas.get('economia_mensal', 0)
    limite_gastos = metas.get('limite_gastos', 0)
    
    # Adicionar informa√ß√µes sobre metas apenas se as datas abrangerem o m√™s atual
    hoje = datetime.datetime.now()
    primeiro_dia_mes, ultimo_dia_mes = obter_datas_mes(hoje.year, hoje.month)
    
    # Verificar se o per√≠odo inclui o m√™s atual
    if (data_inicio <= hoje <= data_fim) or (data_inicio >= primeiro_dia_mes and data_inicio <= ultimo_dia_mes):
        if meta_economia > 0:
            progresso_economia = (saldo_periodo / meta_economia) * 100 if saldo_periodo > 0 else 0
            texto += f"{EMOJI['grafico']} *Meta de Economia*\n"
            texto += f"‚Ä¢ Meta: *{formatar_valor(meta_economia)}*\n"
            texto += f"‚Ä¢ Economia: *{formatar_valor(saldo_periodo)}*\n"
            texto += f"‚Ä¢ Progresso: *{progresso_economia:.1f}%*\n\n"
        
        if limite_gastos > 0:
            porcentagem_gasto = (total_saidas / limite_gastos) * 100
            texto += f"{EMOJI['alerta']} *Limite de Gastos*\n"
            texto += f"‚Ä¢ Limite: *{formatar_valor(limite_gastos)}*\n"
            texto += f"‚Ä¢ Gastos: *{formatar_valor(total_saidas)}*\n"
            texto += f"‚Ä¢ Utilizado: *{porcentagem_gasto:.1f}%*\n\n"
    
    if categorias_entrada:
        texto += f"{EMOJI['entrada']} *Entradas por Categoria*\n"
        for cat, valor in sorted(categorias_entrada.items(), key=lambda x: x[1], reverse=True):
            percentual = (valor / total_entradas * 100) if total_entradas > 0 else 0
            texto += f"‚Ä¢ {cat}: *{formatar_valor(valor)}* ({percentual:.1f}%)\n"
        texto += "\n"
    
    if categorias_saida:
        texto += f"{EMOJI['saida']} *Sa√≠das por Categoria*\n"
        for cat, valor in sorted(categorias_saida.items(), key=lambda x: x[1], reverse=True):
            percentual = (valor / total_saidas * 100) if total_saidas > 0 else 0
            texto += f"‚Ä¢ {cat}: *{formatar_valor(valor)}* ({percentual:.1f}%)\n"
        texto += "\n"
    
    texto += f"Total de transa√ß√µes no per√≠odo: *{len(transacoes_filtradas)}*"
    
    # Bot√µes para navega√ß√£o
    keyboard = [
        [
            InlineKeyboardButton(f"{EMOJI['grafico']} Ver Gr√°fico", callback_data='grafico_relatorio'),
            InlineKeyboardButton(f"{EMOJI['exportar']} Exportar CSV", callback_data='exportar_relatorio')
        ],
        [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]
    ]
    
    # Armazenar dados para uso posterior
    context.user_data['relatorio_atual'] = {
        'transacoes': transacoes_filtradas,
        'periodo': (data_inicio, data_fim),
        'titulo': titulo,
        'total_entradas': total_entradas,
        'total_saidas': total_saidas
    }
    
    # Enviar relat√≥rio
    if is_message:
        await update.message.reply_text(
            texto,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        query = update.callback_query
        await query.edit_message_text(
            texto,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    return RELATORIO

# Fun√ß√£o para exportar relat√≥rio como CSV
async def exportar_relatorio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if 'relatorio_atual' not in context.user_data:
        await query.edit_message_text(
            f"{EMOJI['erro']} N√£o h√° relat√≥rio para exportar. Por favor, gere um relat√≥rio primeiro.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return MENU_PRINCIPAL
    
    relatorio = context.user_data['relatorio_atual']
    transacoes = relatorio['transacoes']
    titulo = relatorio['titulo'].replace(" ", "_").replace(":", "_")
    
    if not transacoes:
        await query.edit_message_text(
            f"{EMOJI['info']} N√£o h√° transa√ß√µes para exportar neste per√≠odo.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_relatorios')]])
        )
        return RELATORIO
    
    # Criar CSV em mem√≥ria
    output = BytesIO()
    output.write("Tipo,Data,Categoria,Valor,Descri√ß√£o\n".encode('utf-8'))
    
    for t in transacoes:
        valor_str = str(t['valor']).replace('.', ',')
        linha = f"{t['tipo']},{t['data']},{t['categoria']},{valor_str},\"{t['descricao']}\"\n"
        output.write(linha.encode('utf-8'))
    
    output.seek(0)
    
    # Enviar arquivo
    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=output,
        filename=f"relatorio_{titulo}.csv",
        caption=f"{EMOJI['exportar']} Exporta√ß√£o de {len(transacoes)} transa√ß√µes"
    )
    
    # Atualizar mensagem
    await query.edit_message_text(
        f"{EMOJI['sucesso']} Relat√≥rio exportado com sucesso como CSV: {len(transacoes)} transa√ß√µes.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{EMOJI['relatorio']} Voltar aos Relat√≥rios", callback_data='voltar_relatorios')],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Menu Principal", callback_data='voltar_menu')]
        ])
    )
    
    return RELATORIO

# Fun√ß√£o para gerar gr√°fico do relat√≥rio
async def grafico_relatorio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if 'relatorio_atual' not in context.user_data:
        await query.edit_message_text(
            f"{EMOJI['erro']} N√£o h√° relat√≥rio para visualizar. Por favor, gere um relat√≥rio primeiro.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return MENU_PRINCIPAL
    
    relatorio = context.user_data['relatorio_atual']
    transacoes = relatorio['transacoes']
    titulo = relatorio['titulo']
    
    if not transacoes:
        await query.edit_message_text(
            f"{EMOJI['info']} N√£o h√° transa√ß√µes para visualizar neste per√≠odo.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_relatorios')]])
        )
        return RELATORIO
    
    # Criar DataFrame para an√°lise
    df = pd.DataFrame(transacoes)
    
    # Converter datas
    df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y %H:%M:%S')
    df['date_only'] = df['data'].dt.date
    
    # Criar gr√°ficos
    
    # 1. Gr√°fico de Barras: Entradas vs Sa√≠das
    plt.figure(figsize=(10, 6))
    entradas_total = relatorio['total_entradas']
    saidas_total = relatorio['total_saidas']
    
    barras = plt.bar([0, 1], [entradas_total, saidas_total], color=['green', 'red'], width=0.5)
    
    # Adicionar r√≥tulos com os valores
    for bar in barras:
        height = bar.get_height()
        plt.annotate(f'R${height:.2f}'.replace('.', ','),
                   xy=(bar.get_x() + bar.get_width() / 2, height),
                   xytext=(0, 3),  # 3 points vertical offset
                   textcoords="offset points",
                   ha='center', va='bottom', fontsize=12)
    
    plt.xticks([0, 1], ['Entradas', 'Sa√≠das'], fontsize=12)
    plt.title(f'Entradas vs Sa√≠das - {titulo}', fontsize=16, fontweight='bold')
    plt.grid(axis='y', alpha=0.3)
    
    # Remover eixo x
    plt.gca().spines['top'].set_visible(False)
    plt.gca().spines['right'].set_visible(False)
    plt.gca().spines['bottom'].set_visible(False)
    
    # Salvar em mem√≥ria
    buf1 = BytesIO()
    plt.tight_layout()
    plt.savefig(buf1, format='png', dpi=100)
    buf1.seek(0)
    
    # 2. Gr√°fico de pizza para categorias de sa√≠da
    if saidas_total > 0:
        plt.figure(figsize=(10, 6))
        
        # Agrupar por categoria para o gr√°fico de pizza
        saidas = df[df['tipo'] == 'saida']
        categorias_saida = saidas.groupby('categoria')['valor'].sum()
        
        # Ordenar do maior para o menor
        categorias_saida = categorias_saida.sort_values(ascending=False)
        
        # Pegar as top 5 categorias e agrupar o resto como "Outros"
        if len(categorias_saida) > 5:
            top_categorias = categorias_saida.head(5)
            outros = pd.Series({'Outros': categorias_saida[5:].sum()})
            categorias_plot = pd.concat([top_categorias, outros])
        else:
            categorias_plot = categorias_saida
            
        # Cores atraentes
        cores = plt.cm.tab10(np.linspace(0, 1, len(categorias_plot)))
        
        # Gr√°fico de pizza com percentuais
        explode = [0.05] * len(categorias_plot)  # Explode all slices
        wedges, texts, autotexts = plt.pie(
            categorias_plot.values, 
            labels=categorias_plot.index, 
            autopct='%1.1f%%', 
            startangle=90, 
            shadow=True, 
            explode=explode,
            colors=cores,
            textprops={'fontsize': 12}
        )
        
        # Tornar os percentuais em negrito
        for autotext in autotexts:
            autotext.set_fontweight('bold')
            
        plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
        plt.title('Distribui√ß√£o de Gastos por Categoria', fontsize=16, fontweight='bold')
        
        # Salvar em mem√≥ria
        buf2 = BytesIO()
        plt.tight_layout()
        plt.savefig(buf2, format='png', dpi=100)
        buf2.seek(0)
    else:
        buf2 = None
    
    # 3. Gr√°fico de linha para fluxo di√°rio, se houver dados suficientes
    if len(df['date_only'].unique()) > 1:
        plt.figure(figsize=(10, 6))
        
        # Agrupar por data
        fluxo_diario = df.groupby(['date_only', 'tipo'])['valor'].sum().unstack().fillna(0)
        
        # Calcular saldo di√°rio acumulado
        if 'entrada' not in fluxo_diario.columns:
            fluxo_diario['entrada'] = 0
        if 'saida' not in fluxo_diario.columns:
            fluxo_diario['saida'] = 0
            
        fluxo_diario['saldo'] = fluxo_diario['entrada'] - fluxo_diario['saida']
        fluxo_diario['saldo_acumulado'] = fluxo_diario['saldo'].cumsum()
        
        # Plotar linhas
        plt.plot(fluxo_diario.index, fluxo_diario['entrada'], 'g-', linewidth=2.5, marker='o', label='Entradas')
        plt.plot(fluxo_diario.index, fluxo_diario['saida'], 'r-', linewidth=2.5, marker='o', label='Sa√≠das')
        plt.plot(fluxo_diario.index, fluxo_diario['saldo_acumulado'], 'b-', linewidth=2.5, marker='s', label='Saldo Acumulado')
        
        plt.title('Fluxo de Caixa Di√°rio', fontsize=16, fontweight='bold')
        plt.xlabel('Data', fontsize=12)
        plt.ylabel('Valor (R$)', fontsize=12)
        plt.grid(True, alpha=0.3)
        plt.legend(fontsize=12)
        
        # Formatar datas no eixo x
        plt.gcf().autofmt_xdate()
        
        # Salvar em mem√≥ria
        buf3 = BytesIO()
        plt.tight_layout()
        plt.savefig(buf3, format='png', dpi=100)
        buf3.seek(0)
    else:
        buf3 = None
        
    # 4. Gr√°fico de barras horizontais para top categorias
    plt.figure(figsize=(10, 6))
    
    # Agrupar por categoria e tipo
    categorias = df.groupby(['categoria', 'tipo'])['valor'].sum().unstack().fillna(0)
    
    # Ordenar por valor total
    categorias['total'] = categorias['entrada'] - categorias['saida']
    categorias = categorias.sort_values('total', ascending=True)
    
    # Pegar as top 10 categorias
    top_categorias = categorias.head(10)
    
    # Criar gr√°fico de barras horizontais
    y_pos = np.arange(len(top_categorias))
    plt.barh(y_pos, top_categorias['entrada'], color='green', alpha=0.7, label='Entradas')
    plt.barh(y_pos, -top_categorias['saida'], color='red', alpha=0.7, label='Sa√≠das')
    
    plt.yticks(y_pos, top_categorias.index)
    plt.xlabel('Valor (R$)', fontsize=12)
    plt.title('Top 10 Categorias por Movimenta√ß√£o', fontsize=16, fontweight='bold')
    plt.legend()
    plt.grid(axis='x', alpha=0.3)
    
    # Salvar em mem√≥ria
    buf4 = BytesIO()
    plt.tight_layout()
    plt.savefig(buf4, format='png', dpi=100)
    buf4.seek(0)
    
    # Enviar os gr√°ficos
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=buf1,
        caption=f"{EMOJI['grafico']} Entradas vs Sa√≠das - {titulo}"
    )
    
    if buf2:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=buf2,
            caption=f"{EMOJI['grafico']} Distribui√ß√£o de Gastos por Categoria"
        )
    
    if buf3:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=buf3,
            caption=f"{EMOJI['grafico']} Fluxo de Caixa Di√°rio"
        )
        
    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=buf4,
        caption=f"{EMOJI['grafico']} Top 10 Categorias por Movimenta√ß√£o"
    )
    
    # Atualizar mensagem
    await query.edit_message_text(
        f"{EMOJI['sucesso']} Gr√°ficos gerados com sucesso para o {titulo}!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{EMOJI['relatorio']} Voltar aos Relat√≥rios", callback_data='voltar_relatorios')],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Menu Principal", callback_data='voltar_menu')]
        ])
    )
    
    return RELATORIO

# Fun√ß√£o para voltar ao menu de relat√≥rios
async def voltar_relatorios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [
            InlineKeyboardButton(f"{EMOJI['calendario']} Relat√≥rio do Dia", callback_data='relatorio_dia'),
            InlineKeyboardButton(f"{EMOJI['calendario']} Relat√≥rio da Semana", callback_data='relatorio_semana')
        ],
        [
            InlineKeyboardButton(f"{EMOJI['calendario']} Relat√≥rio do M√™s", callback_data='relatorio_mes'),
            InlineKeyboardButton(f"{EMOJI['lupa']} Relat√≥rio Personalizado", callback_data='relatorio_personalizado')
        ],
        [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]
    ]
    
    await query.edit_message_text(
        f"{EMOJI['relatorio']} *Relat√≥rios Financeiros*\n\nEscolha o tipo de relat√≥rio que deseja visualizar:",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return RELATORIO

# Fun√ß√£o para preparar fechamento de caixa
async def preparar_fechamento_caixa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    logger.info("Preparando fechamento de caixa")
    
    # Obter data atual
    hoje = datetime.datetime.now()
    data_inicio = hoje.replace(hour=0, minute=0, second=0, microsecond=0)
    data_fim = hoje.replace(hour=23, minute=59, second=59, microsecond=999999)
    
    # Filtrar transa√ß√µes do dia
    transacoes_dia = []
    for t in dados['transacoes']:
        try:
            data_transacao = datetime.datetime.strptime(t['data'], "%d/%m/%Y %H:%M:%S")
            if data_inicio <= data_transacao <= data_fim:
                transacoes_dia.append(t)
        except Exception as e:
            logger.error(f"Erro ao processar data da transa√ß√£o: {str(e)}")
            continue
    
    logger.info(f"Encontradas {len(transacoes_dia)} transa√ß√µes no dia")
    
    # Calcular totais
    total_entradas = sum(t['valor'] for t in transacoes_dia if t['tipo'] == 'entrada')
    total_saidas = sum(t['valor'] for t in transacoes_dia if t['tipo'] == 'saida')
    saldo_dia = total_entradas - total_saidas
    
    # Agrupar por categorias
    categorias_entrada = {}
    categorias_saida = {}
    
    for t in transacoes_dia:
        if t['tipo'] == 'entrada':
            categorias_entrada[t['categoria']] = categorias_entrada.get(t['categoria'], 0) + t['valor']
        else:
            categorias_saida[t['categoria']] = categorias_saida.get(t['categoria'], 0) + t['valor']
    
    # Armazenar dados para confirma√ß√£o
    context.user_data['fechamento'] = {
        'data': obter_data_hoje(),
        'saldo_inicial': dados['saldo_atual'] - saldo_dia,
        'saldo_final': dados['saldo_atual'],
        'total_entradas': total_entradas,
        'total_saidas': total_saidas
    }
    
    # Preparar texto de fechamento
    texto = f"{EMOJI['fechamento']} *Fechamento de Caixa*\n\n"
    texto += f"{EMOJI['calendario']} Data: *{obter_data_hoje()}*\n\n"
    texto += f"{EMOJI['saldo']} Saldo Inicial: *{formatar_valor(dados['saldo_atual'] - saldo_dia)}*\n"
    texto += f"{EMOJI['entrada']} Total de Entradas: *{formatar_valor(total_entradas)}*\n"
    texto += f"{EMOJI['saida']} Total de Sa√≠das: *{formatar_valor(total_saidas)}*\n"
    texto += f"{EMOJI['saldo']} Saldo Final: *{formatar_valor(dados['saldo_atual'])}*\n\n"
    
    if categorias_entrada:
        texto += f"{EMOJI['entrada']} *Entradas por Categoria*\n"
        for cat, valor in sorted(categorias_entrada.items(), key=lambda x: x[1], reverse=True):
            texto += f"‚Ä¢ {cat}: *{formatar_valor(valor)}*\n"
        texto += "\n"
    
    if categorias_saida:
        texto += f"{EMOJI['saida']} *Sa√≠das por Categoria*\n"
        for cat, valor in sorted(categorias_saida.items(), key=lambda x: x[1], reverse=True):
            texto += f"‚Ä¢ {cat}: *{formatar_valor(valor)}*\n"
        texto += "\n"
    
    texto += f"Total de transa√ß√µes: *{len(transacoes_dia)}*\n\n"
    texto += "Deseja confirmar este fechamento de caixa?"
    
    # Bot√µes para confirma√ß√£o
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['confirmar']} Confirmar Fechamento", callback_data='confirmar_fechamento')],
        [InlineKeyboardButton(f"{EMOJI['cancelar']} Cancelar", callback_data='voltar_menu')]
    ]
    
    logger.info("Enviando mensagem de fechamento")
    await query.edit_message_text(
        texto,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIRMAR_FECHAMENTO_CAIXA

# Fun√ß√£o para confirmar fechamento de caixa
async def confirmar_fechamento_caixa(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger.info("Processando confirma√ß√£o de fechamento")
    
    if query.data == 'voltar_menu':
        return await menu_principal(update, context)
    
    if query.data != 'confirmar_fechamento':
        logger.error(f"Callback inv√°lido: {query.data}")
        await query.edit_message_text(
            f"{EMOJI['erro']} Erro ao processar o fechamento de caixa. Por favor, tente novamente.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]])
        )
        return MENU_PRINCIPAL
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Registrar fechamento
    if 'fechamento' in context.user_data:
        fechamento = context.user_data['fechamento']
        
        logger.info(f"Registrando fechamento: {fechamento}")
        
        # Adicionar ao hist√≥rico de fechamentos
        if 'fechamentos' not in dados:
            dados['fechamentos'] = []
        
        dados['fechamentos'].append(fechamento)
        dados['data_ultimo_fechamento'] = fechamento['data']
        
        # Salvar dados
        salvar_dados_usuario(user_id, dados)
        
        # Gerar relat√≥rio do fechamento
        texto = f"{EMOJI['sucesso']} *Fechamento de Caixa Realizado*\n\n"
        texto += f"{EMOJI['calendario']} Data: *{fechamento['data']}*\n\n"
        texto += f"{EMOJI['saldo']} Saldo Inicial: *{formatar_valor(fechamento['saldo_inicial'])}*\n"
        texto += f"{EMOJI['entrada']} Total de Entradas: *{formatar_valor(fechamento['total_entradas'])}*\n"
        texto += f"{EMOJI['saida']} Total de Sa√≠das: *{formatar_valor(fechamento['total_saidas'])}*\n"
        texto += f"{EMOJI['saldo']} Saldo Final: *{formatar_valor(fechamento['saldo_final'])}*\n\n"
        texto += "O fechamento de caixa foi registrado com sucesso!"
        
        # Criar um arquivo de comprovante
        output = BytesIO()
        output.write(texto.encode('utf-8'))
        output.seek(0)
        
        # Enviar arquivo
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=output,
            filename=f"fechamento_{fechamento['data'].replace('/', '-')}.txt",
            caption=f"{EMOJI['fechamento']} Comprovante de Fechamento de Caixa"
        )
        
        # Atualizar mensagem
        await query.edit_message_text(
            f"{EMOJI['sucesso']} *Fechamento de Caixa Realizado*\n\n"
            f"O fechamento de caixa para *{fechamento['data']}* foi registrado com sucesso!\n\n"
            f"Saldo atual: *{formatar_valor(fechamento['saldo_final'])}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]])
        )
        
        # Limpar dados tempor√°rios
        if 'fechamento' in context.user_data:
            del context.user_data['fechamento']
    else:
        logger.error("Dados de fechamento n√£o encontrados em context.user_data")
        await query.edit_message_text(
            f"{EMOJI['erro']} Erro ao processar o fechamento de caixa. Por favor, tente novamente.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]])
        )
    
    return MENU_PRINCIPAL

# Fun√ß√µes para configura√ß√µes
async def callback_configuracoes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    opcao = query.data
    
    if opcao == 'voltar_menu':
        return await menu_principal(update, context)
    
    elif opcao == 'add_cat_entrada':
        await query.edit_message_text(
            f"{EMOJI['adicionar']} *Adicionar Categoria de Entrada*\n\n"
            f"Digite o nome da nova categoria de entrada:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        context.user_data['add_categoria_tipo'] = 'entrada'
        return ADICIONAR_CATEGORIA
    
    elif opcao == 'add_cat_saida':
        await query.edit_message_text(
            f"{EMOJI['adicionar']} *Adicionar Categoria de Sa√≠da*\n\n"
            f"Digite o nome da nova categoria de sa√≠da:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        context.user_data['add_categoria_tipo'] = 'saida'
        return ADICIONAR_CATEGORIA
    
    elif opcao == 'editar_cat_entrada':
        user_id = update.effective_user.id
        dados = carregar_dados_usuario(user_id)
        categorias = dados['categorias_entrada']
        
        keyboard = []
        row = []
        for i, cat in enumerate(categorias):
            if cat != "Outro":  # N√£o permitir editar a categoria "Outro"
                row.append(InlineKeyboardButton(f"{EMOJI['editar']} {cat}", callback_data=f"edit_cat_entrada_{cat}"))
                
                # Dois bot√µes por linha
                if len(row) == 2 or i == len(categorias) - 1:
                    keyboard.append(row)
                    row = []
                    
        keyboard.append([InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')])
        
        await query.edit_message_text(
            f"{EMOJI['editar']} *Editar Categoria de Entrada*\n\n"
            f"Selecione a categoria que deseja editar:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDITAR_CATEGORIA
    
    elif opcao == 'editar_cat_saida':
        user_id = update.effective_user.id
        dados = carregar_dados_usuario(user_id)
        categorias = dados['categorias_saida']
        
        keyboard = []
        row = []
        for i, cat in enumerate(categorias):
            if cat != "Outro":  # N√£o permitir editar a categoria "Outro"
                row.append(InlineKeyboardButton(f"{EMOJI['editar']} {cat}", callback_data=f"edit_cat_saida_{cat}"))
                
                # Dois bot√µes por linha
                if len(row) == 2 or i == len(categorias) - 1:
                    keyboard.append(row)
                    row = []
                    
        keyboard.append([InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')])
        
        await query.edit_message_text(
            f"{EMOJI['editar']} *Editar Categoria de Sa√≠da*\n\n"
            f"Selecione a categoria que deseja editar:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDITAR_CATEGORIA
    
    elif opcao == 'remover_cat_entrada':
        user_id = update.effective_user.id
        dados = carregar_dados_usuario(user_id)
        categorias = dados['categorias_entrada']
        
        if len(categorias) <= 1:
            await query.edit_message_text(
                f"{EMOJI['alerta']} N√£o √© poss√≠vel remover mais categorias de entrada. Deve haver pelo menos uma categoria.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
            )
            return CONFIGURACOES
        
        keyboard = []
        row = []
        for i, cat in enumerate(categorias):
            if cat != "Outro":  # N√£o permitir remover a categoria "Outro"
                row.append(InlineKeyboardButton(f"{EMOJI['remover']} {cat}", callback_data=f"rem_cat_entrada_{cat}"))
                
                # Dois bot√µes por linha
                if len(row) == 2 or i == len(categorias) - 1:
                    keyboard.append(row)
                    row = []
                    
        keyboard.append([InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')])
        
        await query.edit_message_text(
            f"{EMOJI['remover']} *Remover Categoria de Entrada*\n\n"
            f"Selecione a categoria que deseja remover:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return REMOVER_CATEGORIA
    
    elif opcao == 'remover_cat_saida':
        user_id = update.effective_user.id
        dados = carregar_dados_usuario(user_id)
        categorias = dados['categorias_saida']
        
        if len(categorias) <= 1:
            await query.edit_message_text(
                f"{EMOJI['alerta']} N√£o √© poss√≠vel remover mais categorias de sa√≠da. Deve haver pelo menos uma categoria.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
            )
            return CONFIGURACOES
        
        keyboard = []
        row = []
        for i, cat in enumerate(categorias):
            if cat != "Outro":  # N√£o permitir remover a categoria "Outro"
                row.append(InlineKeyboardButton(f"{EMOJI['remover']} {cat}", callback_data=f"rem_cat_saida_{cat}"))
                
                # Dois bot√µes por linha
                if len(row) == 2 or i == len(categorias) - 1:
                    keyboard.append(row)
                    row = []
                    
        keyboard.append([InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')])
        
        await query.edit_message_text(
            f"{EMOJI['remover']} *Remover Categoria de Sa√≠da*\n\n"
            f"Selecione a categoria que deseja remover:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return REMOVER_CATEGORIA
    
    elif opcao == 'exportar_dados':
        await exportar_todos_dados(update, context)
        return CONFIGURACOES
    
    elif opcao == 'config_notificacoes':
        # Configurar notifica√ß√µes
        user_id = update.effective_user.id
        dados = carregar_dados_usuario(user_id)
        
        notificacoes = dados.get('notificacoes', {
            'alerta_limite': True,
            'lembrete_diario': False
        })
        
        keyboard = [
            [InlineKeyboardButton(
                f"{'‚úÖ' if notificacoes.get('alerta_limite', True) else '‚ùå'} Alertas de Limite",
                callback_data='toggle_alerta_limite'
            )],
            [InlineKeyboardButton(
                f"{'‚úÖ' if notificacoes.get('lembrete_diario', False) else '‚ùå'} Lembretes Di√°rios",
                callback_data='toggle_lembrete_diario'
            )],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]
        ]
        
        await query.edit_message_text(
            f"{EMOJI['alerta']} *Configura√ß√µes de Notifica√ß√µes*\n\n"
            f"Personalize como deseja receber notifica√ß√µes:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIGURACOES
    
    elif opcao == 'toggle_alerta_limite' or opcao == 'toggle_lembrete_diario':
        user_id = update.effective_user.id
        dados = carregar_dados_usuario(user_id)
        
        if 'notificacoes' not in dados:
            dados['notificacoes'] = {
                'alerta_limite': True,
                'lembrete_diario': False
            }
        
        if opcao == 'toggle_alerta_limite':
            dados['notificacoes']['alerta_limite'] = not dados['notificacoes'].get('alerta_limite', True)
        else:
            dados['notificacoes']['lembrete_diario'] = not dados['notificacoes'].get('lembrete_diario', False)
        
        salvar_dados_usuario(user_id, dados)
        
        # Atualizar menu de notifica√ß√µes
        notificacoes = dados['notificacoes']
        
        keyboard = [
            [InlineKeyboardButton(
                f"{'‚úÖ' if notificacoes.get('alerta_limite', True) else '‚ùå'} Alertas de Limite",
                callback_data='toggle_alerta_limite'
            )],
            [InlineKeyboardButton(
                f"{'‚úÖ' if notificacoes.get('lembrete_diario', False) else '‚ùå'} Lembretes Di√°rios",
                callback_data='toggle_lembrete_diario'
            )],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]
        ]
        
        await query.edit_message_text(
            f"{EMOJI['alerta']} *Configura√ß√µes de Notifica√ß√µes*\n\n"
            f"Configura√ß√µes atualizadas! Personalize como deseja receber notifica√ß√µes:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIGURACOES
    
    elif opcao == 'voltar_config':
        keyboard = [
            [
                InlineKeyboardButton(f"{EMOJI['adicionar']} Categoria Entrada", callback_data='add_cat_entrada'),
                InlineKeyboardButton(f"{EMOJI['adicionar']} Categoria Sa√≠da", callback_data='add_cat_saida')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['editar']} Editar Cat. Entrada", callback_data='editar_cat_entrada'),
                InlineKeyboardButton(f"{EMOJI['editar']} Editar Cat. Sa√≠da", callback_data='editar_cat_saida')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['remover']} Remover Cat. Entrada", callback_data='remover_cat_entrada'),
                InlineKeyboardButton(f"{EMOJI['remover']} Remover Cat. Sa√≠da", callback_data='remover_cat_saida')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['exportar']} Exportar Dados", callback_data='exportar_dados'),
                InlineKeyboardButton(f"{EMOJI['alerta']} Notifica√ß√µes", callback_data='config_notificacoes')
            ],
            [
                InlineKeyboardButton(f"{EMOJI['erro']} Apagar Dados", callback_data='apagar_dados')
            ],
            [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu Principal", callback_data='voltar_menu')]
        ]
        await query.edit_message_text(
            f"{EMOJI['config']} *Configura√ß√µes*\n\n"
            f"Personalize seu assistente financeiro:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIGURACOES
    
    elif opcao == 'apagar_dados':
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['alerta']} Sim, apagar todos os dados", callback_data='confirmar_apagar_dados')],
            [InlineKeyboardButton(f"{EMOJI['voltar']} N√£o, voltar", callback_data='voltar_config')]
        ]
        
        await query.edit_message_text(
            f"{EMOJI['alerta']} *Aten√ß√£o!*\n\n"
            f"Voc√™ est√° prestes a apagar TODOS os seus dados financeiros, incluindo:\n"
            f"‚Ä¢ Todas as transa√ß√µes\n"
            f"‚Ä¢ Hist√≥rico de fechamentos\n"
            f"‚Ä¢ Categorias personalizadas\n"
            f"‚Ä¢ Metas e configura√ß√µes\n\n"
            f"Esta a√ß√£o N√ÉO pode ser desfeita!\n\n"
            f"Tem certeza que deseja continuar?",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRMAR_APAGAR_DADOS
    
    return CONFIGURACOES

# Fun√ß√£o para adicionar categoria
async def adicionar_categoria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'voltar_config':
            return await callback_configuracoes(update, context)
        return ADICIONAR_CATEGORIA
    
    nome_categoria = update.message.text.strip()
    
    if not nome_categoria or len(nome_categoria) < 2:
        await update.message.reply_text(
            f"{EMOJI['erro']} Nome de categoria inv√°lido. O nome deve ter pelo menos 2 caracteres.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        return ADICIONAR_CATEGORIA
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    tipo = context.user_data.get('add_categoria_tipo', 'entrada')
    campo = f"categorias_{tipo}"
    
    # Verificar se a categoria j√° existe
    if nome_categoria in dados[campo]:
        await update.message.reply_text(
            f"{EMOJI['alerta']} A categoria '{nome_categoria}' j√° existe para {tipo}s.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        return ADICIONAR_CATEGORIA
    
    # Adicionar nova categoria
    dados[campo].append(nome_categoria)
    salvar_dados_usuario(user_id, dados)
    
    # Atualizar os dados em context
    context.user_data['dados'] = dados
    
    # Confirmar para o usu√°rio
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['adicionar']} Adicionar Outra Categoria", callback_data=f"add_cat_{tipo}")],
        [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar √†s Configura√ß√µes", callback_data='voltar_config')],
        [InlineKeyboardButton(f"{EMOJI['voltar']} Menu Principal", callback_data='voltar_menu')]
    ]
    
    await update.message.reply_text(
        f"{EMOJI['sucesso']} Categoria '*{nome_categoria}*' adicionada com sucesso √†s categorias de {tipo}!",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIGURACOES

# Fun√ß√£o para exportar todos os dados
async def exportar_todos_dados(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Verificar se h√° dados para exportar
    if not dados['transacoes']:
        await query.edit_message_text(
            f"{EMOJI['info']} N√£o h√° transa√ß√µes para exportar.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        return
    
    # Criar DataFrame para transa√ß√µes
    df = pd.DataFrame(dados['transacoes'])
    
    # Criar CSV em mem√≥ria
    output = BytesIO()
    df.to_csv(output, index=False, encoding='utf-8')
    output.seek(0)
    
    # Enviar arquivo CSV
    data_atual = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=output,
        filename=f"financas_{data_atual}.csv",
        caption=f"{EMOJI['exportar']} Exporta√ß√£o de {len(dados['transacoes'])} transa√ß√µes (CSV)"
    )
    
    # Exportar como JSON tamb√©m
    output_json = BytesIO()
    output_json.write(json.dumps(dados, ensure_ascii=False, indent=2, default=str).encode('utf-8'))
    output_json.seek(0)
    
    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=output_json,
        filename=f"financas_{data_atual}.json",
        caption=f"{EMOJI['exportar']} Exporta√ß√£o completa em formato JSON"
    )
    
    # Criar relat√≥rios detalhados
    try:
        # Relat√≥rio de entradas por categoria
        entradas_df = df[df['tipo'] == 'entrada'].copy()
        if not entradas_df.empty:
            output_entradas = BytesIO()
            entradas_df.to_csv(output_entradas, index=False, encoding='utf-8')
            output_entradas.seek(0)
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=output_entradas,
                filename=f"entradas_{data_atual}.csv",
                caption=f"{EMOJI['entrada']} Relat√≥rio detalhado de entradas"
            )
        
        # Relat√≥rio de sa√≠das por categoria
        saidas_df = df[df['tipo'] == 'saida'].copy()
        if not saidas_df.empty:
            output_saidas = BytesIO()
            saidas_df.to_csv(output_saidas, index=False, encoding='utf-8')
            output_saidas.seek(0)
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=output_saidas,
                filename=f"saidas_{data_atual}.csv",
                caption=f"{EMOJI['saida']} Relat√≥rio detalhado de sa√≠das"
            )
            
        # Relat√≥rio de fechamentos
        if 'fechamentos' in dados and dados['fechamentos']:
            fechamentos_df = pd.DataFrame(dados['fechamentos'])
            output_fechamentos = BytesIO()
            fechamentos_df.to_csv(output_fechamentos, index=False, encoding='utf-8')
            output_fechamentos.seek(0)
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=output_fechamentos,
                filename=f"fechamentos_{data_atual}.csv",
                caption=f"{EMOJI['fechamento']} Hist√≥rico de fechamentos de caixa"
            )
            
        # Relat√≥rio de metas
        if 'metas' in dados:
            metas_df = pd.DataFrame([dados['metas']])
            output_metas = BytesIO()
            metas_df.to_csv(output_metas, index=False, encoding='utf-8')
            output_metas.seek(0)
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=output_metas,
                filename=f"metas_{data_atual}.csv",
                caption=f"{EMOJI['grafico']} Metas financeiras"
            )
            
    except Exception as e:
        logger.error(f"Erro ao exportar relat√≥rios detalhados: {e}")
    
    # Atualizar mensagem
    await query.edit_message_text(
        f"{EMOJI['sucesso']} *Dados exportados com sucesso!*\n\n"
        f"‚Ä¢ {len(dados['transacoes'])} transa√ß√µes exportadas\n"
        f"‚Ä¢ Formatos: CSV e JSON\n"
        f"‚Ä¢ Relat√≥rios detalhados de entradas e sa√≠das\n"
        f"‚Ä¢ Hist√≥rico de fechamentos\n"
        f"‚Ä¢ Metas financeiras\n\n"
        f"Os arquivos foram enviados acima.",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
    )

# Fun√ß√£o para remover categoria
async def remover_categoria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voltar_config':
        return await callback_configuracoes(update, context)
    
    # Extrair informa√ß√µes da callback_data
    partes = query.data.split('_')
    tipo = partes[2]  # entrada ou saida
    categoria = '_'.join(partes[3:])  # nome da categoria (pode conter underscores)
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Verificar se a categoria est√° em uso
    categoria_em_uso = False
    for transacao in dados['transacoes']:
        if transacao['categoria'] == categoria:
            categoria_em_uso = True
            break
    
    if categoria_em_uso:
        keyboard = [
            [InlineKeyboardButton(f"{EMOJI['confirmar']} Sim, trocar para 'Outro'", callback_data=f'confirm_rem_{tipo}_{categoria}')],
            [InlineKeyboardButton(f"{EMOJI['cancelar']} N√£o, cancelar", callback_data='voltar_config')]
        ]
        
        await query.edit_message_text(
            f"{EMOJI['alerta']} *Aten√ß√£o*\n\n"
            f"A categoria '{categoria}' est√° sendo usada em {sum(1 for t in dados['transacoes'] if t['categoria'] == categoria)} transa√ß√µes.\n\n"
            f"Deseja realmente remov√™-la? Todas as transa√ß√µes desta categoria ser√£o alteradas para 'Outro'.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return REMOVER_CATEGORIA
    
    # Se n√£o estiver em uso, remover diretamente
    await remover_categoria_confirmado(update, context, tipo, categoria)
    
    return CONFIGURACOES

# Fun√ß√£o para confirmar remo√ß√£o de categoria em uso
async def remover_categoria_confirmado(update: Update, context, tipo=None, categoria=None):
    query = update.callback_query
    
    # Se for chamado por confirma√ß√£o de callback
    if tipo is None and categoria is None:
        partes = query.data.split('_')
        tipo = partes[2]  # entrada ou saida
        categoria = '_'.join(partes[3:])  # nome da categoria (pode conter underscores)
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    # Atualizar categorias nas transa√ß√µes
    count_alteracoes = 0
    for transacao in dados['transacoes']:
        if transacao['categoria'] == categoria:
            transacao['categoria'] = 'Outro'
            count_alteracoes += 1
    
    # Remover a categoria
    campo = f"categorias_{tipo}"
    if categoria in dados[campo]:
        dados[campo].remove(categoria)
        salvar_dados_usuario(user_id, dados)
        
        mensagem_sucesso = (
            f"{EMOJI['sucesso']} Categoria '*{categoria}*' removida com sucesso das categorias de {tipo}!"
        )
        
        if count_alteracoes > 0:
            mensagem_sucesso += f"\n\n{count_alteracoes} transa√ß√µes foram atualizadas para a categoria 'Outro'."
        
        await query.edit_message_text(
            mensagem_sucesso,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"{EMOJI['remover']} Remover Outra Categoria", callback_data=f'remover_cat_{tipo}')],
                [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar √†s Configura√ß√µes", callback_data='voltar_config')],
                [InlineKeyboardButton(f"{EMOJI['voltar']} Menu Principal", callback_data='voltar_menu')]
            ])
        )
    else:
        await query.edit_message_text(
            f"{EMOJI['erro']} Erro: Categoria '{categoria}' n√£o encontrada.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
    
    return CONFIGURACOES

# Fun√ß√£o para lidar com mensagens n√£o reconhecidas
async def mensagem_desconhecida(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"{EMOJI['info']} Desculpe, n√£o entendi esse comando. Por favor, use o menu ou digite /start para come√ßar.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Menu Principal", callback_data='voltar_menu')]])
    )
    return MENU_PRINCIPAL

# Fun√ß√£o para editar categoria
async def editar_categoria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voltar_config':
        return await callback_configuracoes(update, context)
    
    # Extrair informa√ß√µes da callback_data
    partes = query.data.split('_')
    tipo = partes[2]  # entrada ou saida
    categoria_antiga = '_'.join(partes[3:])  # nome da categoria (pode conter underscores)
    
    context.user_data['edit_categoria'] = {
        'tipo': tipo,
        'categoria_antiga': categoria_antiga
    }
    
    await query.edit_message_text(
        f"{EMOJI['editar']} *Editar Categoria*\n\n"
        f"Digite o novo nome para a categoria '*{categoria_antiga}*':",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
    )
    
    return EDITAR_CATEGORIA

# Fun√ß√£o para processar a edi√ß√£o da categoria
async def processar_edicao_categoria(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'voltar_config':
            return await callback_configuracoes(update, context)
        return EDITAR_CATEGORIA
    
    nova_categoria = update.message.text.strip()
    
    if not nova_categoria or len(nova_categoria) < 2:
        await update.message.reply_text(
            f"{EMOJI['erro']} Nome de categoria inv√°lido. O nome deve ter pelo menos 2 caracteres.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        return EDITAR_CATEGORIA
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    edit_info = context.user_data.get('edit_categoria', {})
    tipo = edit_info.get('tipo')
    categoria_antiga = edit_info.get('categoria_antiga')
    
    if not tipo or not categoria_antiga:
        await update.message.reply_text(
            f"{EMOJI['erro']} Erro ao processar a edi√ß√£o. Por favor, tente novamente.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        return CONFIGURACOES
    
    campo = f"categorias_{tipo}"
    
    # Verificar se a nova categoria j√° existe
    if nova_categoria in dados[campo]:
        await update.message.reply_text(
            f"{EMOJI['alerta']} A categoria '*{nova_categoria}*' j√° existe para {tipo}s.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_config')]])
        )
        return EDITAR_CATEGORIA
    
    # Contar quantas transa√ß√µes ser√£o afetadas
    transacoes_afetadas = sum(1 for t in dados['transacoes'] if t['categoria'] == categoria_antiga)
    
    # Atualizar a categoria em todas as transa√ß√µes
    for transacao in dados['transacoes']:
        if transacao['categoria'] == categoria_antiga:
            transacao['categoria'] = nova_categoria
    
    # Atualizar a lista de categorias
    try:
        idx = dados[campo].index(categoria_antiga)
        dados[campo][idx] = nova_categoria
    except ValueError:
        # Se a categoria n√£o for encontrada, adicionar a nova
        dados[campo].append(nova_categoria)
    
    # Salvar as altera√ß√µes
    salvar_dados_usuario(user_id, dados)
    
    # Limpar dados tempor√°rios
    if 'edit_categoria' in context.user_data:
        del context.user_data['edit_categoria']
    
    # Confirmar para o usu√°rio
    mensagem_sucesso = (
        f"{EMOJI['sucesso']} Categoria '*{categoria_antiga}*' renomeada para '*{nova_categoria}*' com sucesso!"
    )
    
    if transacoes_afetadas > 0:
        mensagem_sucesso += f"\n\n{transacoes_afetadas} transa√ß√µes foram atualizadas com o novo nome."
    
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI['editar']} Editar Outra Categoria", callback_data=f'editar_cat_{tipo}')],
        [InlineKeyboardButton(f"{EMOJI['voltar']} Voltar √†s Configura√ß√µes", callback_data='voltar_config')],
        [InlineKeyboardButton(f"{EMOJI['voltar']} Menu Principal", callback_data='voltar_menu')]
    ]
    
    await update.message.reply_text(
        mensagem_sucesso,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return CONFIGURACOES

# Fun√ß√£o para gerar gr√°ficos de an√°lise
async def gerar_grafico_analise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    dados = carregar_dados_usuario(user_id)
    
    if not dados['transacoes'] or len(dados['transacoes']) < 5:
        await query.edit_message_text(
            f"{EMOJI['info']} Voc√™ precisa ter pelo menos 5 transa√ß√µes para gerar an√°lises detalhadas.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
        return MENU_PRINCIPAL
    
    # Criar DataFrame para an√°lise
    df = pd.DataFrame(dados['transacoes'])
    df['data'] = pd.to_datetime(df['data'], format='%d/%m/%Y %H:%M:%S')
    df['mes'] = df['data'].dt.month
    df['ano'] = df['data'].dt.year
    
    # An√°lise por m√™s
    try:
        # Agrupar por m√™s e tipo
        analise_mensal = df.groupby(['ano', 'mes', 'tipo'])['valor'].sum().unstack(fill_value=0).reset_index()
        
        # Criar r√≥tulos para o eixo x
        analise_mensal['mes_ano'] = analise_mensal.apply(lambda row: f"{row['mes']}/{row['ano']}", axis=1)
        
        # Criar gr√°fico de barras para an√°lise mensal
        plt.figure(figsize=(12, 6))
        
        # Se n√£o houver colunas de entrada ou sa√≠da, adicionar como zeros
        if 'entrada' not in analise_mensal.columns:
            analise_mensal['entrada'] = 0
        if 'saida' not in analise_mensal.columns:
            analise_mensal['saida'] = 0
        
        # Calcular o saldo mensal
        analise_mensal['saldo'] = analise_mensal['entrada'] - analise_mensal['saida']
        
        # Criar gr√°fico de barras agrupadas
        bar_width = 0.25
        indices = np.arange(len(analise_mensal))
        
        plt.bar(indices - bar_width, analise_mensal['entrada'], bar_width, label='Entradas', color='green', alpha=0.7)
        plt.bar(indices, analise_mensal['saida'], bar_width, label='Sa√≠das', color='red', alpha=0.7)
        plt.bar(indices + bar_width, analise_mensal['saldo'], bar_width, label='Saldo', color='blue', alpha=0.7)
        
        # Adicionar r√≥tulos e t√≠tulo
        plt.xlabel('M√™s/Ano', fontsize=12)
        plt.ylabel('Valor (R$)', fontsize=12)
        plt.title('An√°lise Financeira Mensal', fontsize=16, fontweight='bold')
        plt.xticks(indices, analise_mensal['mes_ano'], rotation=45)
        plt.legend()
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        
        # Salvar em mem√≥ria
        buf1 = BytesIO()
        plt.savefig(buf1, format='png', dpi=100)
        buf1.seek(0)
        
        # Enviar primeiro gr√°fico
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=buf1,
            caption=f"{EMOJI['grafico']} An√°lise Financeira Mensal"
        )
        
        # Gr√°fico de tend√™ncia de saldo
        plt.figure(figsize=(12, 6))
        
        # Ordenar por data e criar uma coluna de saldo acumulado
        df_ordenado = df.sort_values('data')
        df_ordenado['valor_ajustado'] = df_ordenado.apply(lambda row: row['valor'] if row['tipo'] == 'entrada' else -row['valor'], axis=1)
        df_ordenado['saldo_acumulado'] = df_ordenado['valor_ajustado'].cumsum()
        
        # Plotar a tend√™ncia do saldo
        plt.plot(df_ordenado['data'], df_ordenado['saldo_acumulado'], 'b-', linewidth=2.5, marker='o', markersize=4)
        
        plt.xlabel('Data', fontsize=12)
        plt.ylabel('Saldo Acumulado (R$)', fontsize=12)
        plt.title('Evolu√ß√£o do Saldo ao Longo do Tempo', fontsize=16, fontweight='bold')
        plt.grid(True, alpha=0.3)
        
        # Formatar eixo Y para valores monet√°rios
        from matplotlib.ticker import FuncFormatter
        def format_real(x, pos):
            return f'R${x:.0f}'
        plt.gca().yaxis.set_major_formatter(FuncFormatter(format_real))
        
        # Formatar datas no eixo x
        plt.gcf().autofmt_xdate()
        plt.tight_layout()
        
        # Salvar em mem√≥ria
        buf2 = BytesIO()
        plt.savefig(buf2, format='png', dpi=100)
        buf2.seek(0)
        
        # Enviar segundo gr√°fico
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=buf2,
            caption=f"{EMOJI['grafico']} Evolu√ß√£o do Saldo ao Longo do Tempo"
        )
        
        # Atualizar mensagem
        await query.edit_message_text(
            f"{EMOJI['sucesso']} An√°lise financeira gerada com sucesso!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]])
        )
        
    except Exception as e:
        logger.error(f"Erro ao gerar an√°lise: {e}")
        await query.edit_message_text(
            f"{EMOJI['erro']} Ocorreu um erro ao gerar a an√°lise financeira. Por favor, tente novamente.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar", callback_data='voltar_menu')]])
        )
    
    return MENU_PRINCIPAL

async def confirmar_apagar_dados(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'voltar_config':
        return await callback_configuracoes(update, context)
    
    if query.data == 'confirmar_apagar_dados':
        user_id = update.effective_user.id
        
        # Criar estrutura inicial dos dados
        dados_iniciais = {
            "transacoes": [],
            "categorias_entrada": ["Venda", "Investimento", "Sal√°rio", "Outro"],
            "categorias_saida": ["Mercadoria", "Pagamento", "Compra", "Alimenta√ß√£o", "Transporte", "Outro"],
            "saldo_atual": 0,
            "data_ultimo_fechamento": None,
            "metas": {
                "economia_mensal": 0,
                "limite_gastos": 0,
            },
            "notificacoes": {
                "alerta_limite": True,
                "lembrete_diario": False
            }
        }
        
        # Salvar dados iniciais
        salvar_dados_usuario(user_id, dados_iniciais)
        
        # Atualizar dados em context
        context.user_data['dados'] = dados_iniciais
        
        await query.edit_message_text(
            f"{EMOJI['sucesso']} *Dados apagados com sucesso!*\n\n"
            f"Todos os seus dados foram resetados para o estado inicial.\n\n"
            f"Seu saldo atual √©: *{formatar_valor(0)}*",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"{EMOJI['voltar']} Voltar ao Menu", callback_data='voltar_menu')]])
        )
        
        return MENU_PRINCIPAL
    
    return CONFIRMAR_APAGAR_DADOS

# Fun√ß√£o principal
def main():
    # Obter o token do bot (substitua pelo seu token real)
    TOKEN = "7965686857:AAHyp28GLe1p5xklh-pcS-QZCByE45T90J8"
    
    # Criar o aplicativo
    application = Application.builder().token(TOKEN).build()
    
    # Adicionar handlers
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MENU_PRINCIPAL: [
                CallbackQueryHandler(callback_menu_principal)
            ],
            REGISTRAR_TRANSACAO: [
                CallbackQueryHandler(callback_menu_principal)
            ],
            ESCOLHER_TIPO_TRANSACAO: [
                CallbackQueryHandler(callback_menu_principal)
            ],
            INFORMAR_CATEGORIA: [
                CallbackQueryHandler(selecionar_categoria)
            ],
            INFORMAR_VALOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, informar_valor),
                CallbackQueryHandler(informar_valor)
            ],
            INFORMAR_DESCRICAO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, informar_descricao),
                CallbackQueryHandler(informar_descricao)
            ],
            CONFIRMAR_TRANSACAO: [
                CallbackQueryHandler(confirmar_transacao)
            ],
            RELATORIO: [
                CallbackQueryHandler(menu_principal, pattern='^voltar_menu$'),
                CallbackQueryHandler(voltar_relatorios, pattern='^voltar_relatorios$'),
                CallbackQueryHandler(exportar_relatorio, pattern='^exportar_relatorio$'),
                CallbackQueryHandler(grafico_relatorio, pattern='^grafico_relatorio$'),
                CallbackQueryHandler(callback_relatorios)
            ],
            ESCOLHER_PERIODO_RELATORIO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, escolher_periodo_relatorio),
                CallbackQueryHandler(escolher_periodo_relatorio)
            ],
            CONFIRMAR_FECHAMENTO_CAIXA: [
                CallbackQueryHandler(confirmar_fechamento_caixa, pattern='^confirmar_fechamento$'),
                CallbackQueryHandler(menu_principal, pattern='^voltar_menu$'),
                CallbackQueryHandler(preparar_fechamento_caixa, pattern='^novo_fechamento$')
            ],
            CONFIGURACOES: [
                CallbackQueryHandler(callback_configuracoes)
            ],
            ADICIONAR_CATEGORIA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, adicionar_categoria),
                CallbackQueryHandler(adicionar_categoria)
            ],
            REMOVER_CATEGORIA: [
                CallbackQueryHandler(remover_categoria_confirmado, pattern='^confirm_rem_'),
                CallbackQueryHandler(remover_categoria)
            ],
            EDITAR_CATEGORIA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, processar_edicao_categoria),
                CallbackQueryHandler(editar_categoria)
            ],
            DEFINIR_META: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, definir_meta),
                CallbackQueryHandler(definir_meta)
            ],
            AJUSTAR_SALDO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ajustar_saldo),
                CallbackQueryHandler(ajustar_saldo)
            ],
            CONFIRMAR_APAGAR_DADOS: [
                CallbackQueryHandler(confirmar_apagar_dados, pattern='^confirmar_apagar_dados$'),
                CallbackQueryHandler(callback_configuracoes, pattern='^voltar_config$')
            ]
        },
        fallbacks=[CommandHandler("start", start)],
    )
    
    application.add_handler(conv_handler)
    
    # Adicionar handler para mensagens desconhecidas
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, mensagem_desconhecida))
    
    # Iniciar o bot
    application.run_polling()

if __name__ == '__main__':
    main()